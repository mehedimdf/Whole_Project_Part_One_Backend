// datasource and generator setup
datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// ---------------------------------------------------------
//  ENUMS
// ---------------------------------------------------------

enum UserRole {
  USER
  FARMER
  ADMIN
  SUPER_ADMIN
}

enum UserStatus {
  ACTIVE
  INACTIVE
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  EXPIRED
}

enum PaymentStatus {
  SUCCESS
  PENDING
  FAILED
}

enum Plan {
  // Default plan or free
  DEFAULT
  // Monthly plan : 7.99
  MONTHLY
  // yearly plan : 79.99
  ANNUAL
}

enum PaymentProvider {
  STRIPE
}

// ---------------------------------------------------------
//  MODEL
// ---------------------------------------------------------

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  fullName      String
  email         String     @unique
  password      String
  profileImage  String     @default("https://i.ibb.co/Ps9gZ8DD/Profile-image.png")
  contactNumber String?
  address       String?
  country       String?
  role          UserRole   @default(USER)
  status        UserStatus @default(ACTIVE)
  isSubscribe   Boolean    @default(false)

  plan Plan @default(DEFAULT)

  // add for stripe integration
  stripeCustomerId String?

  otp        String?
  otpExpiry  DateTime?
  identifier String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relationships
  subscription Subscription?
  payment      Payment[]
  product      Product[]

  @@map("users")
}

model Admin {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  email String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("admins")
}

model Product {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  price       String
  image       String
  inStock     Boolean
  quantity    Int
  sku         String
  discount    String
  brandName   String
  brandDesc   String
  category    String
  tags        String

  // relationships
  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("products")
}

model Notification {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  receiverId Int

  viewed Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("notifications")
}

//plan model
model SubscriptionPlan {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  planId        Plan     @unique
  name          String
  description   String
  price         Float
  currency      String   @default("USD")
  // month or year
  interval      String
  intervalCount Int?
  features      String[]
  adminId       String?

  // Store payment provider specific IDs
  stripeProductId String?
  stripePriceId   String?

  isActive     Boolean       @default(true)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  subscription Subscription?

  @@map("subscription_plans")
}

model Subscription {
  id                String             @id @default(auto()) @map("_id") @db.ObjectId
  startDate         DateTime           @default(now())
  endDate           DateTime
  cancelAtPeriodEnd Boolean            @default(false)
  status            SubscriptionStatus @default(ACTIVE)

  // which provider with we subscribe
  paymentProvider      PaymentProvider
  stripeSubscriptionId String          @unique
  stripePriceId        String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relationships
  user     User             @relation(fields: [userId], references: [id])
  userId   String           @unique @db.ObjectId
  plan     SubscriptionPlan @relation(fields: [planId], references: [id])
  planId   String           @unique @db.ObjectId
  payments Payment[]

  @@map("subscriptions")
}

model Payment {
  id              String          @id @default(auto()) @map("_id") @db.ObjectId
  amount          Float
  currency        String          @default("USD")
  status          PaymentStatus
  provider        PaymentProvider
  paymentIntentId String? // Stripe payment intent ID
  stripeSessionId String?         @unique
  // userId          String?         @db.ObjectId 

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relationships
  user           User         @relation(fields: [userId], references: [id])
  userId         String       @db.ObjectId
  subscriptionId String       @db.ObjectId
  subscription   Subscription @relation(fields: [subscriptionId], references: [id])

  @@map("payments")
}

model Terms_Condition {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  title                 String
  acceptance_terms      String
  app_purpose           String
  user_responsibilities String
  data_usage            String
  intellectual_property String
  limitation            String
  updates               String
  contactUS             String
  adminId               String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("terms_conditions")
}

model Privacy_Policy {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  title                String
  introduction         String
  information_collect  String[]
  how_useYour_data     String[]
  data_security        String
  third_party_services String
  user_control         String[]
  children_privacy     String
  changes_to_policy    String
  contact_info         String
  adminId              String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("privacy_policies")
}
